@page "/"
@using Cloud_Store.Models.ViewModels
@using Cloud_Store.Services
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles ="User, Administrator")]

<PageTitle>Home</PageTitle>

<div class="row">
    <div class="col-12">
        <h2 class="fw-bolder">Welcome to the Next Cloud Clone</h2>
    </div>
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <AuthorizeView>
                    <NotAuthorized>
                        <span>You are not logged in. Please <a class="fw-bolder" href="/login">Click here</a></span> to login.
                    </NotAuthorized>
                    <Authorized>
                        <span>You are logged in as <span class="fw-bolder">@context.User.Identity.Name</span>.<a class="fw-bolder" href="/logout">Click here</a> to logout.</span>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    </div>
    <div>
        <div class="card">
            <div class="card-body">
                <span><button @onclick="GoBack">Back</button></span>@_showPath
            </div>
        </div>
        @foreach (var folder in Model.Folders)
        {
            <div class="col-12">
                <div class="card">
                    <div class="card-body" @onclick="() => { NavigateToFolder(folder); }">
                        <h5 class="card-title link-underline">@folder</h5>
                    </div>
                </div>
            </div>
        }
        @foreach (var file in Model.Files)
        {
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@file</h5>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code
{
    private HomeViewModel Model { get; set; }
    private string _path = "";
    private bool showRevert = false;
    private string _rootPath = "";
    private string _showPath = "";
    public required FileService FileService { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Model = FileService.GetFileListAsync(_path).Result;
        _path = Model.CurrentPath;
        Console.WriteLine(_path);
        _rootPath = _path;
        _showPath = SlicePath(_path);
    }
    
    private void NavigateToFolder(string folder)
    {
        _path = Path.Combine(_path, folder);
        showRevert = _path != _rootPath;
        Model = FileService.GetFileListAsync(_path).Result;
        _path = Model.CurrentPath;
        _showPath = SlicePath(_path);
    }
    
    private void GoBack()
    {
        _path = FileService.RemoveLastFolder(_path);
        showRevert = _path != _rootPath;
        Model = FileService.GetFileListAsync(_path).Result;
        _path = Model.CurrentPath;
        _showPath = SlicePath(_path);
    }
    
    private string SlicePath(string path)
    {
        return path.Replace(_rootPath+"\\", "");
    }
}
