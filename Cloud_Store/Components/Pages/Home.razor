@page "/"
@using Cloud_Store.Models.ViewModels
@using Cloud_Store.Services
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles ="User, Administrator")]

<PageTitle>Home</PageTitle>

<div class="row">
    <div class="col-12">
        <h2 class="fw-bolder">Welcome to the Next Cloud Clone</h2>
    </div>
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <AuthorizeView>
                    <NotAuthorized>
                        <span>You are not logged in. Please <a class="fw-bolder" href="/login">Click here</a></span> to login.
                    </NotAuthorized>
                    <Authorized>
                        <span>You are logged in as <span class="fw-bolder">@context.User.Identity.Name</span>.<a class="fw-bolder" href="/logout">Click here</a> to logout.</span>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    </div>
    <div>
        <div class="card">
            <div class="card-body d-flex align-items-center justify-content-between">
                @if (_showRevert)
                {
                    <div>
                        <button class="btn btn-outline-primary" @onclick="GoBack">Back</button>
                    </div>
                }
                <div class="flex-grow-1 text-center">
                    <p class="mb-0">@_showPath</p>
                </div>
                <div>
                    <button class="btn btn-outline-success me-2" >
                        <i class="bi bi-upload me-1"></i>Upload File
                    </button>
                    <button class="btn btn-outline-primary" @onclick="CreateFolder">
                        <i class="bi bi-folder-plus me-1"></i>Create Folder
                    </button>
                </div>
            </div>
        </div>
        @foreach (var folder in Model.Folders)
        {
            <div class="col-12">
                <div class="card">
                    <div class="card-body" @onclick="() => { NavigateToFolder(folder); }">
                        <h5 class="card-title link-underline">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-folder" viewBox="0 0 16 16">
                                <path d="M.54 3.87.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.826a2 2 0 0 1-1.991-1.819l-.637-7a2 2 0 0 1 .342-1.31zM2.19 4a1 1 0 0 0-.996 1.09l.637 7a1 1 0 0 0 .995.91h10.348a1 1 0 0 0 .995-.91l.637-7A1 1 0 0 0 13.81 4zm4.69-1.707A1 1 0 0 0 6.172 2H2.5a1 1 0 0 0-1 .981l.006.139q.323-.119.684-.12h5.396z"/>
                            </svg>
                            @folder
                        </h5>
                    </div>
                </div>
            </div>
        }
        @foreach (var file in Model.Files)
        {
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-file" viewBox="0 0 16 16">
                                <path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1"/>
                            </svg>
                            @file
                        </h5>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code
{
    private HomeViewModel Model { get; set; }
    private string _path = "";
    private bool _showRevert;
    private string _rootPath = "";
    private string _showPath = "";
    public required FileService FileService { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Model = FileService.GetFileListAsync(_path).Result;
        _path = Model.CurrentPath;
        _rootPath = _path;
        _showPath = SlicePath(_path);
    }
    
    private void NavigateToFolder(string folder)
    {
        _path = Path.Combine(_path, folder);
        _showRevert = _path != _rootPath;
        Model = FileService.GetFileListAsync(_path).Result;
        _path = Model.CurrentPath;
        _showPath = SlicePath(_path);
    }
    
    private async Task GoBack()
    {
        _path = FileService.RemoveLastFolder(_path);
        _showRevert = _path != _rootPath;
        Model = await FileService.GetFileListAsync(_path);
        _path = Model.CurrentPath;
        _showPath = SlicePath(_path);
    }
    
    private string SlicePath(string path)
    {
        path = path.Replace("\\", "/");
        if (_path == _rootPath)
        {
            return "/";
        }
        return path.Replace(_rootPath.Replace("\\","/")+"/", "");
    }
    
    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var stream = file.OpenReadStream();
        await FileService.WriteFileAsync(file.Name, stream);
        await RefreshFileList();
    }

    private async Task CreateFolder()
    {
        Console.WriteLine(_path);
        string folderName = "NewFolder_" + DateTime.Now.Ticks;
        await FileService.CreateFolderAsync(_path, folderName);
        await RefreshFileList();
    }

    private async Task RefreshFileList()
    {
        Model = await FileService.GetFileListAsync(_path);
    }
}
