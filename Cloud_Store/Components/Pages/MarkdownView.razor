@page "/markdownView"
@using Microsoft.AspNetCore.Authorization
@using System.Text
@using Cloud_Store.Models.ViewModels
@attribute [Authorize(Roles ="User, Administrator, Owner")]
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<div class="row">
    <div>
        <div class="card">
            <div class="card-body d-flex align-items-center justify-content-between">
                <div>
                    <button class="btn btn-outline-primary" @onclick="NavigateBack">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left me-1" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8"/>
                        </svg>
                        Back
                    </button>
                </div>
                <div class="flex-grow-1 text-center">
                    <p class="mb-0">@Path.GetFileName(_path)</p>
                </div>
                <div>
                    <button class="btn btn-outline-danger" @onclick="DownloadFile">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-download me-1" viewBox="0 0 16 16">
                            <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5"/>
                            <path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708z"/>
                        </svg>
                        Download
                    </button>
                </div>
            </div>
        </div>

        <div class="card mt-3">
            <div class="card-body">
                <div id="pdf-container" class="pdf-viewer" style="width: 100%; height: 800px;">
                    @((MarkupString)Markdown.ToHtml(_markdownContent))
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private byte[] _pdfBytes;
    private string _path = string.Empty;
    private string _backroute = string.Empty;
    private bool _isDownloading = false;
    private string _markdownContent = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        bool forceBackNav = false;
        // Get the URI
        var uri = Navigation.Uri;

        // Parse the query string
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(uri).Query);

        // Extract specific query parameters
        if (query.TryGetValue("path", out var pathValue))
        {
            _path = pathValue;
        }
        else
        {
            forceBackNav = true;
        }

        if (query.TryGetValue("back_path", out var backRouteValue))
        {
            _backroute = backRouteValue;
        }

        if (forceBackNav)
        {
            var url = "/files" + "?back_path=" + _backroute;
            Navigation.NavigateTo(url);
            return;
        }

        // Load PDF content
        await LoadFileAsync();
    }

    private async Task LoadFileAsync()
    {
        // Use encoding detection and sanitization
        byte[] fileBytes = await File.ReadAllBytesAsync(_path);

        // Detect encoding
        Encoding encoding = DetectEncoding(fileBytes);

        // Decode with the detected encoding and sanitize
        _markdownContent = SanitizeContent(encoding.GetString(fileBytes));

        // Ensure the UI updates
        StateHasChanged();
    }

    private void NavigateBack()
    {
        string url = "/files" + "?back_path=" + _backroute;
        Navigation.NavigateTo(url);
    }

    private async Task DownloadFile()
    {
        // Prevent multiple simultaneous download attempts
        if (_isDownloading)
        {
            return;
        }

        try
        {
            // Set flag to prevent multiple downloads
            _isDownloading = true;

            // Get file name from path
            var fileName = Path.GetFileName(_path);

            // Use JavaScript interop to trigger download
            await JsRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(_pdfBytes));

            // Show success toast
            await JsRuntime.InvokeVoidAsync("showToast", "PDF downloaded successfully", "success");
        }
        catch (Exception ex)
        {
            // Show error toast
            await JsRuntime.InvokeVoidAsync("showToast", $"Error: {ex.Message}", "danger");
        }
        finally
        {
            // Reset the flag to allow future downloads
            _isDownloading = false;
        }
        
    }
    
    private Encoding DetectEncoding(byte[] fileBytes)
    {
        // Try to detect encoding
        try
        {
            // Use UTF8 by default with fallback
            return Encoding.UTF8;
        }
        catch
        {
            // Fallback to default encoding if detection fails
            return Encoding.Default;
        }
    }

    private string SanitizeContent(string content)
    {
        // Remove or replace invalid characters
        return new string(content
            .Where(c => !char.IsControl(c) || c == '\n' || c == '\r' || c == '\t')
            .ToArray());
    }
    
    private static class Markdown
    {
        public static string ToHtml(string markdownText)
        {
            return Markdig.Markdown.ToHtml(markdownText);
        }
    }
}