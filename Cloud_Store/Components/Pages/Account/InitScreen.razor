@page "/init"
@using Cloud_Store.Models.Entities
@using Cloud_Store.Models.ViewModels
@using Cloud_Store.Services
@inject NavigationManager NavigationManager
@inject UserService UserService

<AuthorizeView>
    <NotAuthorized>
        <!-- Form for the initial user creation -->
        <div class="row">
            <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
                <EditForm Model="@Model" OnValidSubmit="CreateUser" FormName="HomeForm" Context="editFormContext">
                    <DataAnnotationsValidator/>
                    <div class="mb-3 text-center flex-column">
                        <h3>Welcome to Cloud Store</h3>
                        <br/>
                        <p>
                            Please Create you initial User
                            <Tooltip Title="Please note that this user is set as Administrator for your Cloud Store installation" Placement="TooltipPlacement.Left">
                                <svg xmlns="http://www.w3.org/2000/svg"
                                     width="16"
                                     height="16"
                                     fill="currentColor"
                                     class="bi bi-info-circle"
                                     viewBox="0 0 16 16"
                                     data-bs-toggle="tooltip"
                                     data-bs-placement="top"
                                     title="Create your initial administrator account">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"></path>
                                    <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0"></path>
                                </svg>
                            </Tooltip>
                        </p>
                    </div>
                    <div class="mb-3">
                        <label>Username</label>
                        <InputText @bind-Value="Model.Username" class="form-control" placeholder="Username"/>
                        <ValidationMessage For="@(() => Model.Username)"/>
                    </div>
                    <div class="mb-3">
                        <label>Password</label>
                        <InputText type="password" @bind-Value="Model.Password" class="form-control" placeholder="Password"/>
                        <ValidationMessage For="@(() => Model.Password)"/>
                    </div>
                    <div class="mb-3">
                        <label>Confirm Password</label>
                        <InputText type="password" @bind-Value="Model.ConfirmPassword" class="form-control" placeholder="Confirm Password"/>
                        <ValidationMessage For="@(() => Model.ConfirmPassword)"/>
                    </div>
                    <div class="mb-3 text-center">
                        <span class="text-danger">@_errorMessage</span>
                    </div>
                    <div class="mb-3 d-grid gap-2">
                        <button type="submit" class="btn btn-primary">Home</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    // Site model and other variables for controlling the init page
    private LoginViewModel Model { get; } = new();
    private string? _errorMessage;
    private HashingService _hashingService = new();

    protected override void OnInitialized()
    {
        // Check if the user list is empty, if not, redirect to the home page
        base.OnInitialized();
        UserAccount[] users = UserService.GetUserListAsync().Result;
        if (users.Length != 0)
        {
            NavigationManager.NavigateTo("/", true);
        }
    }

    private async Task CreateUser()
    {
        // if a user is already created, redirect to the home page
        // Secure for the case that the user tries to access the init page after the user is created
        UserAccount[] users = UserService.GetUserListAsync().Result;
        if (users.Length != 0)
        {
            NavigationManager.NavigateTo("/", true);
        }
        // Check if the passwords match
        if(Model.Password != Model.ConfirmPassword)
        {
            _errorMessage = "Passwords do not match";
            return;
        }
        
        // Create the user object with role administrator
        UserAccount user = new UserAccount
        {
            Username = Model.Username,
            Password = _hashingService.HashPassword(Model.Password),
            Role = "Owner"
        };
        
        // Add the user to the database and redirect to the home page for login
        await UserService.AddUserAsync(user);
        NavigationManager.NavigateTo("/", true);
    }

}