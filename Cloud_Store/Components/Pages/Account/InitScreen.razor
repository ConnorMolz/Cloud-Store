@page "/init"
@using Cloud_Store.Data
@using Cloud_Store.Models.Entities
@using Cloud_Store.Models.ViewModels
@using Cloud_Store.Services
@inject NavigationManager NavigationManager
@inject CloudStoreContext DbContext

<AuthorizeView>
    <NotAuthorized>
        <div class="row">
            <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
                <EditForm Model="@Model" OnValidSubmit="CreateUser" FormName="HomeForm" Context="editFormContext">
                    <DataAnnotationsValidator/>
                    <div class="mb-3 text-center flex-column">
                        <h3>LOGIN</h3>
                    </div>
                    <div class="mb-3">
                        <label>Username</label>
                        <InputText @bind-Value="Model.Username" class="form-control" placeholder="Username"/>
                        <ValidationMessage For="@(() => Model.Username)"/>
                    </div>
                    <div class="mb-3">
                        <label>Password</label>
                        <InputText type="password" @bind-Value="Model.Password" class="form-control" placeholder="Password"/>
                        <ValidationMessage For="@(() => Model.Password)"/>
                    </div>
                    <div class="mb-3 text-center">
                        <span class="text-danger">@_errorMessage</span>
                    </div>
                    <div class="mb-3 d-grid gap-2">
                        <button type="submit" class="btn btn-primary">Home</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private LoginViewModel Model { get; set; } = new();
    private string? _errorMessage;
    private HashingService _hashingService = new();
    private UserService _userService;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _userService = new UserService(DbContext);
        UserAccount[] users = _userService.GetUserListAsync().Result;
        if (users.Length != 0)
        {
            NavigationManager.NavigateTo("/", true);
        }
    }

    private async Task CreateUser()
    {
        UserAccount user = new UserAccount
        {
            Username = Model.Username,
            Password = _hashingService.HashPassword(Model.Password),
            Role = "Administrator"
        };
        await _userService.AddUserAsync(user);
        NavigationManager.NavigateTo("/");
    }

}