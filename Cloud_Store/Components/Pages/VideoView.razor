@page "/videoview"
@using Microsoft.AspNetCore.Authorization
@using System.Text
@using Cloud_Store.Models.ViewModels
@using Cloud_Store.Services
@attribute [Authorize(Roles ="User, Administrator, Owner")]
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<div class="row">
    <div>
        <div class="card">
            <div class="card-body d-flex align-items-center justify-content-between">
                <div>
                    <button class="btn btn-outline-primary" @onclick="navigateBack">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left me-1" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8"/>
                        </svg>
                        Back
                    </button>
                </div>
                <div class="flex-grow-1 text-center">
                    <p class="mb-0">@Path.GetFileName(_path)</p>
                </div>
                <div>
                    <button class="btn btn-outline-danger" @onclick="DownloadFile">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-download me-1" viewBox="0 0 16 16">
                            <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5"/>
                            <path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708z"/>
                        </svg>
                        Download
                    </button>
                </div>
            </div>
        </div>

        <div class="card mt-3">
            <div class="card-body">
                <div class="video-container flex justify-center items-center min-h-screen">
                    <video @ref="videoPlayer" controls class="max-w-full">
                        <source src="@_cleanedImagePath" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                </div>
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger mt-3">
                        @ErrorMessage
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code{
    private ElementReference videoPlayer;
    
    private FileViewModel _model = new ();

    private string _path = string.Empty;

    private string _backroute = string.Empty;
    
    private bool _isDownloading = false;
    
    private string _cleanedImagePath = String.Empty;
    
    private string ErrorMessage { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        bool forceBackNav = false;
        // Get the URI
        var uri = Navigation.Uri;

        // Parse the query string
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(uri).Query);

        // Extract specific query parameters
        if (query.TryGetValue("path", out var pathValue))
        {
            _path = pathValue;
        }
        else
        {
            forceBackNav = true;
        }

        if (query.TryGetValue("back_path", out var backRouteValue))
        {
            _backroute = backRouteValue;
        }

        if (forceBackNav)
        {
            var url = "/files" + "?back_path=" + _backroute;

            Navigation.NavigateTo(url);
        }

        // Call GetFileContent as an async method
        GetImage();
    }

    private void navigateBack()
    {
        string url = "/files" + "?back_path=" + _backroute;
        Navigation.NavigateTo(url);
    }

    private async Task GetImage()
    {
        try
        {
            if (!File.Exists(_path))
            {
                ErrorMessage = "Image file not found";
                return;
            }

            int pathIndex = _path.IndexOf("\\Files");
            _cleanedImagePath = _path.Substring(pathIndex);
            Console.WriteLine(_cleanedImagePath);
            
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading image: {ex.Message}";
           
        }
    }

    private async Task DownloadFile()
    {
        // Prevent multiple simultaneous download attempts
        if (_isDownloading)
        {
            return;
        }

        try
        {
            // Set flag to prevent multiple downloads
            _isDownloading = true;

            // Read file bytes after successful save
            var fileBytes = await File.ReadAllBytesAsync(_path);

            // Get file name from path
            var fileName = Path.GetFileName(_path);

            // Use JavaScript interop to trigger download
            await JsRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(fileBytes));

            // Show success toast
            await JsRuntime.InvokeVoidAsync("showToast", "File saved and downloaded successfully", "success");
        }
        catch (Exception ex)
        {
            // Show error toast
            await JsRuntime.InvokeVoidAsync("showToast", $"Error: {ex.Message}", "danger");
        }
        finally
        {
            // Reset the flag to allow future downloads
            _isDownloading = false;
        }
    }
}